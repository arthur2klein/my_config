*convcommit.txt*  Plugin for git-related workflow commands            *convcommit*

==============================================================================
INTRODUCTION                                                  *convcommit-intro*

This plugin provides custom git-related workflow commands for version tagging,
committing, and pushing changes.
It is designed for projects requiring guided conventional commits and
changelog construction.

==============================================================================
COMMANDS & FUNCTIONS                                            *convcommit-api*

The following Lua functions are exposed:

------------------------------------------------------------------------------
`require('convcommit').create_version_tag()`     *convcommit.create_version_tag()*

Creates a new version tag based on commit messages since the latest tag.

- Analyzes commit messages since the latest tag.
- Determines the appropriate bump level (major, minor, patch).
- Generates a changelog section for the new version.
- Prompts the user to confirm or edit the changelog message.
- Writes the message to `CHANGELOG.md`.
- Creates a Git tag and pushes it to the remote.
- Commits the changelog with a standard commit message.

Uses the `Changelog-Entry:` commit footer if available, or falls back to the
first line of the commit message.

------------------------------------------------------------------------------
`require('convcommit').git_add()`                           *convcommit.git_add()*

Displays every not git-ignored changed files, removing the entry if n is
pressed, and removing it while staging the change if y is pressed.

------------------------------------------------------------------------------
`require('convcommit').push()`                                 *convcommit.push()*

See also:
- |convcommit-push-config|

Pulls remote changes and pushes local commits.

git pull --rebase && git push

Also opens a browser page with the ci of the current commit.

Takes an optional PushConfig configuration as parameter.

------------------------------------------------------------------------------
`require('convcommit').create_commit()`               *convcommit.create_commit()*

Launches an interactive prompt to help build a Conventional Commit message.

This function walks the user through:

1. Selecting a related ticket type (GitHub, GitLab, Jira, or none).
2. Selecting a commit type:
     build, chore, ci, docs, feat, fix, perf, refactor, revert, style, test,
     merge
3. Selecting an optional scope, inferred from staged file paths.
4. Writing the commit subject and optional body.
5. Indicating if the commit is a BREAKING CHANGE, with a description.
6. Optionally adding any number of key-value footers.

Finally, the user is shown the generated commit message and can confirm/edit
it before it's used to create the Git commit.

The commit follows the Conventional Commits format and can automatically
include:

- `BREAKING CHANGE:` footers
- Ticket ID/Link footers (based on user input)
- Additional custom footers (Changelog-Entry will be used for the
  create_version_tag function)

Example interaction:

    `Ticket`: github
    `Enter github ticket link`: https://github.com/example/repo/issues/123
    `Select commit type`: feat
    `Select scope (or none)`: core
    `Enter subject`: add new command parser
    `Enter commit body (optional)`: Allow to build more complete and
    responsive apis using our tool.
    `Is this a breaking change?` Yes
    `Describe the breaking change`: removed old parser system
    `Add a footer (key: value)`: Changelog-Entry: new command parser
    `Add a footer (key: value)`:
    `Confirm message`:
    ```text
    feat(core)!: [123] add new command parser

    Allow to build more complete and responsive apis using our tool.

    BREAKING CHANGE: removed old parser system

    Changelog-Entry: new command parser
    Ticket-Id: 123
    Ticket-Link: https://github.com/example/repo/issues/123
    ```


==============================================================================
USAGE                                                         *convcommit-usage*

To use this plugin, require it in your config:

```lua
local git = require("convcommit")
git.push()
```
==============================================================================
INSTALLATION & CONFIGURATION                                  *convcommit-config*
As an example, here is a configuration of the plugin using Lazy.
```lua
{
  "arthur2klein/convcommit",
  dependencies = { "MunifTanjim/nui.nvim", "nvim-telescope/telescope.nvim" },
  config = function()
    local convcommit = require("custom.convcommit")
    vim.keymap.set("n", "<leader>gg", convcommit.create_commit)
    vim.keymap.set("n", "<leader>ga", convcommit.git_add)
    vim.keymap.set("n", "<leader>gv", convcommit.create_version_tag)
    vim.keymap.set("n", "<leader>gp", convcommit.push)
  end,
}
```
------------------------------------------------------------------------------
PushConfig                                              *convcommit-push-config

Configuration for |require("convcommit").push()|
- `should_pull`: boolean? => If true, will pull before pushing. Default to true.
- `open_pipeline`: boolean? => If true, will open a browser with the new ci. Default to true.

vim:tw=78:ts=8:ft=help:norl:
